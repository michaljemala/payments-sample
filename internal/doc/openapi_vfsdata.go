// Code generated by vfsgen; DO NOT EDIT.

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// openapi statically implements the virtual filesystem provided to vfsgen.
var openapi = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 6, 12, 12, 14, 19, 717849885, time.UTC),
		},
		"/openapi.yaml": &vfsgen۰CompressedFileInfo{
			name:             "openapi.yaml",
			modTime:          time.Date(2019, 6, 12, 12, 14, 19, 717337229, time.UTC),
			uncompressedSize: 11599,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xe3\xb6\x11\x7f\xd7\xa7\xd8\x99\x66\x46\x77\x8d\x4c\xc9\x8e\x9b\x26\x7c\xe9\xe8\x6c\x37\xd1\x4c\x9b\xd3\xd8\xbe\xe9\x83\x4f\xf5\x40\xc4\x52\x42\x42\x02\x34\x00\xca\x56\xd3\x7c\xf7\x0e\x48\xf0\x9f\x44\x51\xa4\x23\xf5\x7c\x17\xf3\xc9\x22\x17\x8b\xfd\xed\x9f\xdf\x82\x4b\x8b\x08\x39\x89\x98\x0b\xdf\x38\x23\xe7\xac\xc7\xb8\x2f\xdc\x1e\x80\x66\x3a\x40\x17\xa6\x64\x1d\x22\xd7\x0a\xc6\xd3\x49\x0f\x80\xa2\xf2\x24\x8b\x34\x13\xdc\x85\x71\xf9\x27\x08\x1f\x14\x0b\xa3\x00\x21\xca\xd6\x5c\x5f\xdd\xdc\x9a\x85\x4e\x0f\x60\x85\x52\x25\xab\x46\xce\xc8\x39\xed\x29\x94\xe6\x8e\xd9\xe9\x04\x62\x19\xb8\xd0\x5f\x6a\x1d\xb9\xc3\x61\x20\x3c\x12\x2c\x85\xd2\xee\x77\xa3\xef\x46\xc3\x7e\x2f\x22\x7a\x99\x08\x0e\x33\xc5\xe6\x07\xc0\x02\x75\xfa\x07\x80\x8a\xc3\x90\xc8\xb5\x0b\xd7\xa8\x25\xc3\x15\x82\x27\x82\x00\xbd\xcc\xb0\x6c\xa1\x63\xe5\x45\x84\x92\x98\x87\x13\xea\x82\xcf\x38\xcd\x60\xda\xe7\x11\x91\x24\x44\x6d\x0d\x4c\xaf\x13\xe0\x24\x44\x17\xfa\x3e\x0b\x34\xca\x3b\x46\x67\xfd\xfc\xe1\x86\x67\x72\x33\x04\x0f\xd6\x85\x3f\x96\x64\xc5\xf8\x02\xf4\x12\x41\x45\xe8\x31\x9f\x21\x05\x46\x9d\x92\x1a\xc6\x5d\x78\x88\x51\xae\x4b\xf7\x24\x3e\xc4\x4c\xa2\x31\x95\x04\x0a\x4b\x4f\x94\xb7\xc4\x90\xb8\xa5\x3b\x00\x7a\x1d\xa1\x0b\x4a\x4b\xc6\x17\x3b\x8d\xa7\x38\xd7\x42\x3a\xc4\xf3\x44\xcc\xf5\x3d\x8f\xc3\x39\xca\xce\x78\x42\x42\x11\x7c\x29\x42\x20\x25\x40\x56\x29\xa4\x4a\x3f\x01\x38\x4f\x22\x65\x87\x82\xa7\xc5\x0b\x01\x17\x91\x05\xde\xed\x43\xd2\xaf\x42\x29\xec\x36\xab\x9d\xfe\x11\xcc\x65\x5c\xe3\x02\x65\xe5\x49\xc8\x38\x0b\xe3\xd0\x85\xd3\x1d\x30\x14\xfb\x0f\x3e\x03\x44\x8a\xde\x14\x34\xd3\x18\x2a\x10\x1c\xc8\x27\x47\x96\xdc\x26\x4f\xe9\xed\xbf\x8c\x46\xbd\x6c\x47\x15\x09\xae\xb0\xc4\x20\xfd\xb3\xd1\xa8\xef\xee\x42\x7d\x13\x7b\x1e\x2a\xe5\xc7\xc1\x1a\xa4\x75\x00\xcd\x92\xb1\xc4\x67\xe5\x9c\xf3\x04\xd7\xc8\x75\xd5\x7a\x12\x45\x01\xf3\x12\x7a\x1b\xae\x38\x75\x48\xc4\xbe\xfe\x59\x09\x5e\x95\xaa\x47\x6e\xae\xaf\x24\xfa\x2e\xf4\xff\x34\xf4\x44\x18\x09\x6e\x4a\x61\x98\xca\xaa\xa1\xe5\xc9\x8b\xdc\x9a\x6b\x0b\xb3\x08\x40\xff\xbc\x09\xe5\x84\xaf\x48\xc0\x68\x1a\xa0\x12\xcf\x1e\x1d\x55\x1a\x53\x22\x25\x59\x6f\x3d\x4b\xb2\x69\x7b\x49\xb3\x2b\xae\xa4\x14\x32\x85\x1d\x99\x6e\xb5\xd9\x8a\x2e\x24\x12\x8d\x40\x80\xe3\x63\x16\xc6\xda\xfe\xe3\x25\x82\xd6\xb3\x79\xf6\x3c\xc4\xa8\xf4\x3b\x41\xd7\x85\x5d\x45\x12\x6b\x19\x17\x39\x5c\xe3\xae\x76\xce\xaa\x77\x55\x9b\xf0\x27\x16\x5f\xa7\x36\xf6\x1b\x13\xfe\x74\x77\x2a\xfc\x54\xf8\x05\x54\x9e\xfc\xc1\xda\x3a\x84\x76\x4d\x89\xaf\x8f\x91\xe8\x16\x69\xb7\x24\xff\xc0\xc9\x3c\x48\x5a\x47\x0a\x25\x87\x49\xe3\xe4\x2e\xb3\x45\xc0\x78\x14\xeb\xa3\xc3\x3c\x66\xe6\x5b\x5f\x7c\xff\x7c\x5f\x48\x54\x22\x96\x1e\x02\xd1\x5a\xb2\x79\xac\x51\x19\x37\xf8\x01\xf3\x3e\x67\xd7\xe4\x67\xd5\xe1\xaf\xf6\xaf\x7b\x46\x7f\x6b\x71\x70\x25\x1c\xf0\x89\x29\x6d\x0e\x8a\x4d\xac\xb1\x40\x6d\x73\xf4\xdd\x7a\x42\x5b\x9c\x5b\x0b\x33\x36\x7a\xa5\x39\x5f\xef\x8e\x1e\x7b\x88\x8b\x98\x31\x8a\x5c\x9b\x5e\x5c\x39\xf9\xec\xe0\xa5\x7a\xb7\x37\x79\x6f\x72\xd9\x4c\x26\x0d\x25\x37\xad\x23\x92\xbc\x8d\xbe\x84\x9e\xf9\x03\xea\x5a\x1e\x39\xdf\x0f\x8a\x0b\x0d\xbe\x88\xf9\xf1\x71\x1c\xb5\x4b\x12\xed\x2d\xb7\x12\xff\x8a\x32\xdd\x3a\xe9\xcd\xb9\xbe\xda\x28\xbf\xa0\x8c\x3f\x64\xc7\xdf\xc1\x84\xcf\xee\xf8\x26\x4a\xad\xfa\x7d\xd7\x12\x35\x11\x7d\x19\xf5\x99\x42\xfc\x23\x17\x28\xc5\x00\x35\x6e\x55\xe8\x65\x72\xbb\x75\x8d\xa6\x5a\xbe\xd8\x2a\xad\x4b\xfa\x86\x0c\x19\x6f\x7b\xad\x5a\x00\xa9\xbb\xa8\xd3\x2b\xf6\x35\xca\xec\xd6\xa9\xde\x24\x46\xd9\x16\x9b\xea\xc7\xd3\x09\xa0\x11\xc8\xa0\xa7\x29\x22\xe6\x3f\xa3\x57\x7e\x9d\x48\x3d\x71\xa7\x34\xd1\xb1\x1a\x80\x27\x28\x0e\xd2\x29\xdf\x2c\x8b\x92\x34\x81\xd4\xac\x8c\x2e\x15\x2f\xc3\xab\x9d\x52\x6c\x98\xf5\xe3\xed\xed\xd4\x2e\x4d\x36\x72\x4a\xd4\x45\xb1\xab\xb6\x31\x2f\x97\xcd\x89\x9d\x07\x78\x29\xea\x0d\xfd\xe9\xd8\xb2\xeb\x06\xb0\x8c\x43\xc2\x4f\x24\x12\x9a\x9c\x56\x6d\xee\x83\xf0\x93\x61\x5d\x24\xc5\x3c\xc0\xb0\xd8\x85\xa2\x26\x2c\xd8\x1d\xf4\x4d\x7d\xf8\x14\x05\x84\x93\x6c\x1c\x59\xab\xb3\x26\x70\x93\xcb\xda\xa0\xff\x10\x88\x39\x31\xb9\x13\xa7\x55\x50\x64\xbf\x51\x4e\xf2\x23\xb5\x03\x8c\x83\x2f\x64\x68\x6e\x7f\xf8\x30\xb9\x5c\x9d\x57\x73\xa4\xe2\x15\x23\x48\xb4\x0b\x71\x6c\x2b\xf1\x22\x96\x12\xb9\xb7\xbe\x28\x85\xac\x62\x47\x26\x90\x84\x00\x88\x02\x8a\x3e\xe3\x68\xde\x6b\xe0\x6e\x72\xf3\x1e\xce\xcf\x4e\xff\x3a\x7b\x63\xe7\xba\x8f\x8f\x8f\x0e\x53\xc2\x11\x72\x31\x64\x4a\x0c\x97\x22\xc4\xa1\xd2\x84\x53\x22\xa9\x1a\x7a\x56\xd9\xbd\x51\xa6\x9c\xa5\x0e\xdf\xee\x34\xf6\x9f\x82\xa3\x36\xdc\x54\x67\xd5\x35\x46\x12\x55\x32\xc0\x23\x10\x5a\x49\x20\xa1\x88\x0b\xc2\xaa\x29\x91\xba\xe4\x5f\x91\x20\x6e\x93\x4c\x11\xd1\x1a\x25\x77\xa1\xff\xef\x37\xa3\xff\xde\x9d\x9e\x7c\x3f\xfb\x48\xff\xfc\xf6\xcd\x47\xe7\x23\xfd\xf5\xec\xb7\xb7\x7f\xfb\xaa\x68\x28\x19\xce\xb2\xda\x26\xee\x29\x47\x21\xd5\x32\xa6\x54\xa2\xca\xcd\x6c\x89\x25\x60\x1c\x4f\xf7\x62\x31\x52\x67\x7b\xa5\x3c\xa6\xd7\x7b\x85\x24\x2e\x58\xb5\xaf\xd5\x8a\x45\x42\x69\x12\xdc\xb7\xe2\x85\x64\xf4\x2a\xd7\x5b\xc2\xd5\x09\xd3\xcd\x7b\xf8\xe6\xf4\xdb\x6f\x6d\x42\x67\x8b\x36\x78\xa2\x66\x07\xdb\xb2\x6e\x8c\xe3\xd1\xdd\x5d\x28\xc8\xe3\xd0\x85\xbb\x9b\x7f\x4d\xfe\x7e\x3b\x80\x9b\xab\xe9\x78\x56\x5e\x3f\x25\xb2\xf0\x4e\xcb\xe0\x24\x9d\x70\x17\xa0\x9f\x48\x88\x39\x6b\xd8\x16\x12\x99\x4d\x1a\xd1\x98\x2b\x9f\x7f\xb7\x51\x3f\x47\x8e\x3e\xf3\x58\x52\x2d\x0a\x16\x6c\x85\x1c\x1e\x99\x5e\x66\x6a\x5a\xef\x96\x4c\x69\x77\xee\xf7\xae\xbc\x4f\x65\x9a\xde\x76\x83\x48\x8a\x15\xa3\xd5\x2d\x9a\x4a\x68\x9c\xae\x9b\xda\x65\x45\x2d\x92\x6a\x25\xed\xd5\x93\x8a\xdb\x2a\xac\x2a\xed\x18\xf0\xc6\x0c\xb6\xaa\x21\xc3\xb9\x3f\x75\xf7\xe6\xd0\x8f\xb6\x1f\xa5\xed\x88\x97\x32\x8a\x6c\x6c\xd6\xa6\x44\xb6\xc7\xbf\xb5\x4c\x3c\xdd\x39\xbb\x6e\x3e\xa2\x50\xa2\x49\xd3\x99\xc4\x3c\xdf\xe6\x8a\x8a\xb6\x0d\x8d\x8c\x0e\x12\xa9\x41\x69\xca\x34\x2b\x13\x78\xcd\x2e\xe6\x62\xb4\xcb\xbb\x52\x71\x4c\x2c\xd9\xb5\xb1\x7e\x47\x07\x81\x82\x57\xb2\xc1\xd1\xac\xfa\xde\x90\xdb\x5d\xaf\x71\x0b\x7d\x13\xac\x44\x61\xd2\x10\xbb\xbe\x2d\x64\x9d\xb7\xbf\xb5\x2e\xfd\xa2\xd8\x55\x5f\x99\x33\xb7\x75\x66\x1f\xf2\x0e\xab\x55\x55\x08\xbe\xa3\xce\xb4\x3b\xf4\xcb\x0d\xf3\x97\x9a\xe3\xf1\x56\x38\x36\x0a\x63\xc1\xec\x69\x30\x59\xef\xb4\x48\x45\x9f\x49\xb5\x15\xae\x8a\xd6\x7f\x30\xfe\x0b\x68\x91\x54\x75\x22\x9d\x7e\x1a\x6b\x9b\x80\x01\xe9\xa0\xdf\x08\x77\x53\xcf\xf1\xa9\xbd\x7a\x23\xdc\x4d\x7d\x24\x71\xd5\x5a\xbd\x11\x66\x22\x56\xed\xb6\xa8\xfb\xe8\xd1\xc8\x77\xf9\xf9\xfb\x95\xed\x0e\xce\x76\x25\x98\x29\x83\x0d\x2c\xf3\x0c\x72\xb6\x18\xd8\x0a\x9f\x1d\x84\x0d\x49\x10\xbc\xf7\xeb\x1e\x00\x9c\x3c\x93\x2a\x2b\x28\x92\x77\x8c\x41\xfe\x5a\xb0\x69\x74\x13\xb1\x3e\xdb\xb4\x66\x7e\xac\x3a\xb9\xfa\x2f\x14\x9d\x28\xfa\x25\xd8\x77\x30\xb2\xaf\xfd\x20\xf8\x7b\x69\xe0\x77\xd4\xfb\xe7\x5c\xc4\xaf\xe7\x92\xa3\x9e\x4b\xb6\x3f\x38\xed\x7c\x3b\xd9\x1e\xef\x77\x7c\x91\x79\xed\x4e\xe5\xeb\x35\xb1\xff\x1f\x89\x5d\xfe\x52\xf3\xca\xc0\xaf\x89\x7a\x30\xad\x87\x48\xd4\xff\x05\x00\x00\xff\xff\x4f\x2a\xa4\x7f\x4f\x2d\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/openapi.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
